#!/bin/sh -x

params="$(getopt -o f:km:OC:sdqXS:hv -l file:,socket,mode:,no-out,build,directory:,shell,debug,quiet,keep,no-context,mount-suffix,target,help,version --name "$0" -- "$@")"
eval set -- "$params"

file=Dockerfile.dapper
socket=false

while true
do
    case "$1" in
	--file|-f)
	    file="$2"
	    shift 2
	    ;;
	--socket|-k)
	    socket=true
	    shift
	    ;;
	--mode|-m)
	    # Ignored, we only support bind
	    shift 2
	    ;;
	--no-out|-O)
	    # Ignored, we only support bind
	    shift
	    ;;
	--build)
	    # Not supported
	    echo "$0 doesn't support --build yet"
	    exit 1
	    ;;
	--directory|-C)
	    cd "$2"
	    shift 2
	    ;;
	--shell|-s)
	    command=bash
	    shift
	    ;;
	--debug|-d|--quiet|-q|--keep|--no-context|-X|--help|-h|--version|-v)
	    # Ignored
	    shift
	    ;;
	--mount-suffix|-S)
	    suffix=":$2"
	    shift 2
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    echo "$0 doesn't support $1" >&2
	    exit 1
	    ;;
    esac
done

[[ -n "$command" ]] && set -- "$command"

gitid="$(git branch --show-current | tr / _)"
gitid="${gitid:-$(git show --format=%h -s)}"
container="$(basename $(pwd)):${gitid}"
docker build -t "${container}" -f "${file}" --build-arg BASE_BRANCH=${BASE_BRANCH:devel} .

extract_var() {
    docker inspect "$1" | sed -n -E "/\"$2=/{s/[[:space:]]+\"$2=([^\"]+)\",/\1/;p}"
}

DAPPER_ENV="$(extract_var "${container}" DAPPER_ENV)"
DAPPER_SOURCE="$(extract_var "${container}" DAPPER_SOURCE)"
DAPPER_DOCKER_SOCKET="$(extract_var "${container}" DAPPER_DOCKER_SOCKET)"

args=
if [[ "${socket}" = true ]] || [[ "${DAPPER_DOCKER_SOCKET}" = true ]];
then
    if [ -f /var/run/docker.sock ]; then
	# Docker
	args="${args} -v /var/run/docker.sock:/var/run/docker.sock:z"
    else
	# Assume rootless Podman
	args="${args} -v /run/user/$(id -u)/podman/podman.sock:/var/run/docker.sock${suffix}"
    fi
fi

docker run -it --rm $(printf -- " -e %s" $DAPPER_ENV) -v "$(pwd):${DAPPER_SOURCE}${suffix}" ${args} "${container}" "$@"
